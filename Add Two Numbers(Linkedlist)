/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */ 
 //QUESTION STATEMENT
//  You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

// You may assume the two numbers do not contain any leading zero, except the number 0 itself.
// Example 1:

// Input: l1 = [2,4,3], l2 = [5,6,4]
// Output: [7,0,8]
// Explanation: 342 + 465 = 807.

//CODE
class Solution {
    void insert(ListNode** root, int item){
       ListNode* temp = new ListNode();
       temp->val = item;
       temp->next = *root;
       *root = temp;
}
  
ListNode *arrayToList(vector<int>&arr, int n)
{
    ListNode *root = NULL;
    for (int i = n-1; i >= 0 ; i--)
        insert(&root, arr[i]);
    return root;
}
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode *temp = new ListNode();
        temp->next = 0;
        int rem=0;
        vector<int>ans;
      while(l1!=NULL && l2!=NULL){
          int num = l1->val+l2->val;
          l1=l1->next;
          l2=l2->next;
           ans.push_back((num+rem)%10);
           rem = (num+rem)/10;
      }
      while(l1!=NULL){
          int num = l1->val;
          l1=l1->next;
          ans.push_back((num+rem)%10);
          rem = (num+rem)/10;
      }
      while(l2!=NULL){
          int num = l2->val;
          l2=l2->next;
          ans.push_back((num+rem)%10);
          rem = (num+rem)/10;
      }
      if(rem>0)
      ans.push_back(rem);
  int n = ans.size();
 ListNode* root = arrayToList(ans, n);
 
      return root;  
    }
};
