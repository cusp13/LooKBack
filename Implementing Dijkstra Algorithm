//QUESTION STATEMENT
// Given a weighted, undirected and connected graph of V vertices and an adjacency list adj where adj[i] is a list of lists containing two integers where the first integer of each list j denotes there is edge between i and j , second integers corresponds to the weight of that  edge . You are given the source vertex S and You to Find the shortest distance of all the vertex's from the source vertex S. You have to return a list of integers denoting shortest distance between each node and Source vertex S.
 
// Note: The Graph doesn't contain any negative weight cycle.
// Example 1:

// Input:
// V = 2
// adj [] = {{{1, 9}}, {{0, 9}}}
// S = 0
// Output:
// 0 9
// Explanation:

// The source vertex is 0. Hence, the shortest 
// distance of node 0 is 0 and the shortest 
// distance from node 1 is 9.

//IMPLEMENTING CODE
vector <int> dijkstra(int V, vector<vector<int>> adj[], int S){
    vector<int>dist(V,1e9);
    priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>pq;
    pq.push({0,S});
    dist[S]=0;
    while(!pq.empty()){
        int dis = pq.top().first;
        int node = pq.top().second;
        for(auto it:adj[node]){
            int u=it[0];
            int v=it[1];
            if(v+dis<dist[u]){
                dist[u]=v+dis;
                pq.push({v+dis,u});
            }
         }
         pq.pop();
      }
      return dist;
   }
